#! /usr/bin/env bash

bold='\033[1m'
origin='\033[0m'
black='\E[30;1m'
red='\E[31;1m'
green='\E[32;1m'
yellow='\E[33;1m'
blue='\E[34;1m'
magenta='\E[35;1m'
cyan='\E[36;1m'
white='\E[37;1m'

cut_off="------------------------------------------------------------------------"

# Color-echo
# $1: message
# $2: color
cecho() {
    echo -e "${2:-${bold}}${1}"
    tput sgr0 # Reset to normal.
}

put_error() {
    cecho "ERROR: $1" $red
}

exit_with_msg() {
    cecho "$1" $red
    exit -1
}

info_msg() {
    echo "########################################################################"
    cecho "INFO: $1" $magenta
    echo "########################################################################"
}

warn() {
    cecho "$1" $yellow
}

pacman_conf=/etc/pacman.conf

no_root() {
    if [[ $USER = 'root' ]]; then
        echo "Do not use root."
        exit -1
    fi
}

# $1 prompt
put_cutoff() {
    _line="\n${cut_off}\n"
    cecho $_line $cyan
    if [[ -n "$1" ]]; then
        echo -e "$1"
        cecho $_line $cyan
    fi
}

do_install() {
    sudo pacman -S --needed --noconfirm "$@"
}

select_option() {
    put_cutoff
    local msg=$1 && shift
    local tmp_array=($@)
    local length=${#tmp_array[@]}
    local sequence=$(seq -s " " 00 $length)
    cecho "$msg :"
    for ((i = 0; i < $length; i++)); do
        echo "$i>    ${tmp_array[$i]}"
    done
    check_input "$sequence" ans
    put_cutoff
}

# Display an array as options
# $1 array
# reutrns the index of the item selected by the user

# enhanced `read` - name a range for checking
# $1 input range, e.g. 123 Yn abcd (case insensitive)
# $2 variable's name check_input() {local _range=$1
check_input() {
    local _range=$1
    local is_valid=no
    local _default=${_range:0:1}

    while [[ $is_valid = 'no' ]]; do
        read -p "Input: " ans
        [[ -z "$ans" ]] && ans=$_default
        ans=$(echo $ans | tr '[A-Z]' '[a-z]')
        if [[ "$_range" = *$ans* ]]; then
            is_valid=yes
        else
            put_error "Valid answer: $_range (default=$_default):"
        fi
    done

    [[ -n $2 ]] && read $2 <<<$ans
}

# -----------------------------------------------------------------------------
# basic
# -----------------------------------------------------------------------------

logo() {
    put_cutoff
    cecho "
   ▄████████    ▄████████  ▄████████    ▄█    █▄     ▄█  ███▄▄▄▄      ▄████████
  ███    ███   ███    ███ ███    ███   ███    ███   ███  ███▀▀▀██▄   ███    ███
  ███    ███   ███    ███ ███    █▀    ███    ███   ███▌ ███   ███   ███    █▀
  ███    ███  ▄███▄▄▄▄██▀ ███         ▄███▄▄▄▄███▄▄ ███▌ ███   ███   ███
▀███████████ ▀▀███▀▀▀▀▀   ███        ▀▀███▀▀▀▀███▀  ███▌ ███   ███ ▀███████████
  ███    ███ ▀███████████ ███    █▄    ███    ███   ███  ███   ███          ███
  ███    ███   ███    ███ ███    ███   ███    ███   ███  ███   ███    ▄█    ███
  ███    █▀    ███    ███ ████████▀    ███    █▀    █▀    ▀█   █▀   ▄████████▀
               ███    ███                                                       " $bold

    echo

}

pacman_optimize() {

    iso=$(curl -4 ifconfig.co/country-iso)
    pacman -Syy
    local pkgs=("pacman-contrib" "reflector")
    do_install "${pkgs[@]}"

    # Enabling parallel downloads
    sed -i 's/^#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf
    cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.BAK
    reflector -a 48 -f 5 -l 20 --sort rate --save /etc/pacman.d/mirrorlist
}
